/*
 * generated by Xtext
 */
package com.rainerschuster.webidl.generator

import com.google.inject.Inject
import com.rainerschuster.webidl.util.NameUtil
import com.rainerschuster.webidl.webIDL.Argument
import com.rainerschuster.webidl.webIDL.Attribute
import com.rainerschuster.webidl.webIDL.CallbackRest
import com.rainerschuster.webidl.webIDL.Const
import com.rainerschuster.webidl.webIDL.ExtendedAttributeList
import com.rainerschuster.webidl.webIDL.ExtendedInterfaceMember
import com.rainerschuster.webidl.webIDL.Interface
import com.rainerschuster.webidl.webIDL.InterfaceMember
import com.rainerschuster.webidl.webIDL.Operation
import com.rainerschuster.webidl.webIDL.Special
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider

//import static extension com.rainerschuster.webidl.util.NameUtil.*
import static extension com.rainerschuster.webidl.util.TypeUtil.*

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class WebIDLGenerator implements IGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		for (e : resource.allContents.toIterable.filter(typeof(Interface))) {
//			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.binding);
//		};
//		for (e : resource.allContents.toIterable.filter(typeof(CallbackRest))) {
//			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.binding);
//		};
	}

	// TODO consider eCrossReferences for implementsStatements!

	def binding(Interface iface) '''
		«IF iface.eContainer.fullyQualifiedName != null»
			package «iface.eContainer.fullyQualifiedName»;

		«ENDIF»

		public interface «iface.name»«IF iface.inherits != null» extends «iface.inherits.fullyQualifiedName»«ENDIF» {
		«FOR i : iface.interfaceMembers SEPARATOR '\n'»
			«binding(i)»
		«ENDFOR»
		}
	'''

	def binding(CallbackRest callback) '''
		«IF callback.eContainer.fullyQualifiedName != null»
			package «callback.eContainer.fullyQualifiedName»;

		«ENDIF»

		public interface «callback.name» {
			«callback.type.toJavaType» call(«FOR i : callback.arguments SEPARATOR ', '»«binding(i)»«ENDFOR»);
		}
	'''

	def binding(ExtendedInterfaceMember member) {
		bindingInterfaceMember(member.eal, member.interfaceMember)
	}

	def dispatch bindingInterfaceMember(ExtendedAttributeList eal, InterfaceMember interfaceMember) {
		System.out.println("Fallback method - Unsupported type " + interfaceMember.class.name + "!");
	}

	/* TODO NON-SPEC: Added "public static final " */
	def dispatch bindingInterfaceMember(ExtendedAttributeList eal, Const constant) '''
		«constant.type.toJavaType» «NameUtil.getEscapedJavaName(constant.name)» = «constant.constValue»;

	'''

	// TODO is... for boolean! (non-nullable?!)
	def dispatch bindingInterfaceMember(ExtendedAttributeList eal, Attribute attribute) '''
		«IF !attribute.inherit»
			«attribute.type.toJavaType» get«attribute.name.toFirstUpper»();
		«ENDIF»
		«IF !attribute.readOnly»
			void set«attribute.name.toFirstUpper»(«attribute.type.toJavaType» «NameUtil.getEscapedJavaName(attribute.name)»);
		«ENDIF»

	'''

	// FIXME What if more than one specials occur, e.g.: setter creator void (unsigned long index, HTMLOptionElement? option);
	def dispatch bindingInterfaceMember(ExtendedAttributeList eal, Operation operation) '''
		«operation.type.toJavaType» «IF operation.name.nullOrEmpty»«IF operation.specials.contains(Special.GETTER)»_get«ELSEIF operation.specials.contains(Special.SETTER)»_set«ELSEIF operation.specials.contains(Special.CREATOR)»_create«ELSEIF operation.specials.contains(Special.DELETER)»_delete«ELSEIF operation.specials.contains(Special.LEGACYCALLER)»_call«ENDIF»«ELSE»«NameUtil.getEscapedJavaName(operation.name)»«ENDIF»(«FOR i : operation.arguments SEPARATOR ', '»«binding(i)»«ENDFOR»);
	'''

	def binding(Argument parameter) '''
		«parameter.type.toJavaType»«IF parameter.ellipsis»...«ENDIF» «NameUtil.getEscapedJavaName(parameter.name)»'''

}
