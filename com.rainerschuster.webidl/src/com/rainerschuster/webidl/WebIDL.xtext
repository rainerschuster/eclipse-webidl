/*
 * Copyright 2014 Rainer Schuster
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar com.rainerschuster.webidl.WebIDL hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate webIDL "http://www.rainerschuster.com/webidl/WebIDL"

// ImplementsStatement -> IncludesStatement
// CallbackFunction -> Callback
// + Mixin
// + Namespace

// + Constructor

// AbstractIntegerType -> UnrestrictedIntegerType
// AbstractFloatType -> UnrestrictedFloatType

// NonAnyType -> DistinguishableType
// - DateType
// - RegExpType
// - ErrorType
// - DOMExceptionType
// + SymbolType
// + ObservableArrayType
// + RecordType

// - Serializer ?
// + StaticMember
// + AsyncIterable
// + ReadOnlyMember
// + 

Definitions:
	definitions+=ExtendedDefinition*
;

ExtendedDefinition:
	eal=ExtendedAttributeList? def=Definition
;

Definition:
	Callback
	| Interface
//	| Mixin
	| Namespace
	| Partial
	| Dictionary
	| Enum
	| Typedef
	| IncludesStatement
;

InterfaceOrTypedef:
	Interface
	| Typedef
;

DictionaryOrTypedef:
	Dictionary
	| Typedef
;

Callback:
	callback?='callback' name=IDENTIFIER_WEBIDL '=' type=ReturnType '(' (arguments+=Argument (',' arguments+=Argument)*)? ')' ';'
;

Interface:
	callback?='callback'? 'interface' mixin?='mixin'? name=IDENTIFIER_WEBIDL (':' inherits=[InterfaceOrTypedef|IDENTIFIER_WEBIDL])? '{' interfaceMembers+=ExtendedInterfaceMember* '}' ';'
;

Partial:
	'partial' PartialDefinition
;

PartialDefinition:
	PartialInterface
	| PartialDictionary
	| Namespace
;

PartialInterface:
	'interface' mixin?='mixin'? interfaceName=[Interface|IDENTIFIER_WEBIDL] '{' interfaceMembers+=ExtendedInterfaceMember* '}' ';'
;

ExtendedInterfaceMember:
	eal=ExtendedAttributeList? interfaceMember=InterfaceMember
;

InterfaceMember:
	PartialInterfaceMember
	| Constructor
;

PartialInterfaceMember:
	Const
	| Operation
//	| Serializer // Only variant with SerializationPattern
	| Stringifier // Only EmptyStringifier
//	| StaticMember
	| Iterable_
//	| AsyncIterable
//	| ReadOnlyMember
	| Attribute
//	| ReadWriteAttribute
	| Maplike // ReadWriteMaplike
	| Setlike // ReadWriteSetlike
//	| InheritAttribute
;

Namespace:
	'namespace' name=IDENTIFIER_WEBIDL '{' namespaceMembers+=ExtendedNamespaceMember* '}' ';'
;

ExtendedNamespaceMember:
	eal=ExtendedAttributeList? namespaceMember=NamespaceMember
;

NamespaceMember:
	Operation // TODO check this again!
;

Dictionary:
	'dictionary' name=IDENTIFIER_WEBIDL (':' inherits=[DictionaryOrTypedef|IDENTIFIER_WEBIDL])? '{' dictionaryMembers+=ExtendedDictionaryMember* '}' ';'
;

ExtendedDictionaryMember:
	eal=ExtendedAttributeList? dictionaryMember=DictionaryMember
;

DictionaryMember:
	required?='required' type=ExtendedType name=IDENTIFIER_WEBIDL ';'
	| type=Type name=IDENTIFIER_WEBIDL defaultValue=Default? ';'
;

PartialDictionary:
	'dictionary' dictionaryName=[Dictionary|IDENTIFIER_WEBIDL] '{' dictionaryMembers+=ExtendedDictionaryMember* '}' ';'
;

Default:{Default}
	'=' defaultValue=DefaultValue
;

DefaultValue:
	value=ConstValue
	| value=STRING
	| {DefaultValue} '[' ']'
	| {DefaultValue} '{' '}'
//	| {DefaultValue} 'null' // TODO
;

Enum:
	'enum' name=IDENTIFIER_WEBIDL '{' values+=STRING (',' values+=STRING)* optionalComma?=','? '}' ';'
;

// Callback

Typedef:
	'typedef' type=ExtendedType name=IDENTIFIER_WEBIDL ';'
;

IncludesStatement:
	ifaceA=[Interface|IDENTIFIER_WEBIDL] 'includes' ifaceB=[InterfaceOrTypedef|IDENTIFIER_WEBIDL] ';'
;

Const:
	'const' type=ConstType name=IDENTIFIER_WEBIDL '=' constValue=ConstValue ';'
;

ConstValue:
	BooleanLiteral
	| FloatLiteral
	| INTEGER_WEBIDL
	| 'null'
;

BooleanLiteral returns ecore::EBoolean:
	'true'
	| 'false'
;

FloatLiteral returns ecore::EFloat:
	FLOAT_WEBIDL
	| '-Infinity'
	| 'Infinity'
	| 'NaN'
;

Constructor
	: {Constructor} 'constructor' '(' (arguments+=Argument (',' arguments+=Argument)*)? ')' ';'
;

//Serializer
//	: serializer?='serializer' '=' pattern=SerializationPattern ';' // TODO the semicolon is not specified!
//;
//
//SerializationPattern
//	: {SerializationPattern}'{' patternMap=SerializationPatternMap? '}' 
//	| {SerializationPattern}'[' patternList=SerializationPatternList? ']' 
//	| {SerializationPattern}identifiers+=IDENTIFIER_WEBIDL
//;
//
//SerializationPatternMap
//	: getter?='getter' 
//	| inherit?='inherit'? attribute?='attribute' // TODO getter is specified, but attribute not directly!
//	| inherit?='inherit' (',' identifiers+=IDENTIFIER_WEBIDL)*
//	| identifiers+=IDENTIFIER_WEBIDL (',' identifiers+=IDENTIFIER_WEBIDL)*
//;
//
//SerializationPatternList
//	: getter?='getter' 
//	| identifiers+=IDENTIFIER_WEBIDL (',' identifiers+=IDENTIFIER_WEBIDL)*
//;

Stringifier
	: {EmptyStringifier} stringifier?='stringifier' ';'
;

Attribute
	: (stringifier?='stringifier'? /*|*/ static?='static'?) inherit?='inherit'? readOnly?='readonly'? 'attribute' type=ExtendedType name=AttributeName ';'
;

AttributeName:
	AttributeNameKeyword
	| IDENTIFIER_WEBIDL
;

AttributeNameKeyword:
	'async'
	| 'required'
;

Operation
	: static?='static'? specials+=Special* type=ReturnType name=IDENTIFIER_WEBIDL? '(' (arguments+=Argument (',' arguments+=Argument)*)? ')' ';'
;

enum Special:
	GETTER='getter'
	| SETTER='setter'
	| DELETER='deleter'
//	| LEGACYCALLER='legacycaller'
//	| STRINGIFIER='stringifier'
//	| SERIALIZER='serializer'
;

Argument:
	eal=ExtendedAttributeList?
		(optional?="optional" type=ExtendedType name=ArgumentName defaultValue=Default? 
		| type=Type ellipsis?='...'? name=ArgumentName)
;

ArgumentName:
	ArgumentNameKeyword
	| IDENTIFIER_WEBIDL
;

Iterable_
	: 'iterable' '<' types+=ExtendedType (',' types+=ExtendedType)? '>' ';'
//	| legacy?='legacyiterable' '<' types+=ExtendedType '>' ';'
	| 'async' 'iterable' '<' types+=ExtendedType (',' types+=ExtendedType)? '>' ('(' (arguments+=Argument (',' arguments+=Argument)*)? ')')? ';'
;

Maplike
	: readOnly?='readonly'? 'maplike' '<' keyType=ExtendedType ',' valueType=ExtendedType '>' ';'
;

Setlike
	: readOnly?='readonly'? 'setlike' '<' type=ExtendedType '>' ';'
;

ExtendedAttributeList:
	'[' extendedAttributes+=ExtendedAttribute (',' extendedAttributes+=ExtendedAttribute)* ']';

ExtendedAttribute:
	ExtendedAttributeNoArgs
	| ExtendedAttributeArgList
	| ExtendedAttributeNamedArgList
	| ExtendedAttributeIdent
	| ExtendedAttributeIdentList
;

ArgumentNameKeyword:
	'async'
	| 'attribute'
	| 'callback'
	| 'const'
	| 'constructor'
	| 'deleter'
	| 'dictionary'
	| 'enum'
	| 'getter'
	| 'includes'
	| 'inherit'
	| 'interface'
	| 'iterable'
//	| 'legacycaller'
//	| 'legacyiterable'
	| 'maplike'
	| 'mixin'
	| 'namespace'
	| 'partial'
	| 'readonly'
	| 'required'
//	| 'serializer'
	| 'setlike'
	| 'setter'
	| 'static'
	| 'stringifier'
	| 'typedef'
	| 'unrestricted'
;

ExtendedType:
	eal=ExtendedAttributeList? type=Type
;

Type:
	SingleType nullable?=Nullable?
	| UnionType nullable?=Nullable?
;

SingleType:
	DistinguishableType
	| {AnyType} 'any' // TODO any is not nullable!
	| {PromiseType} 'Promise' '<' type=ReturnType '>' // TODO PromiseType is not nullable!
;

// TODO any is not allowed as union member type
UnionType:
	'(' unionMemberTypes+=ExtendedType ('or' unionMemberTypes+=ExtendedType)+ ')'
;

DistinguishableType:
	PrimitiveType
	| StringType
	| {ReferenceType} typeRef=[Definition|IDENTIFIER_WEBIDL]
	| {SequenceType} 'sequence' '<' type=ExtendedType '>'
	| {ObjectType} 'object'
	| {SymbolType} 'symbol'
	| {DateType} 'Date' // TODO remove
	| {RegExpType} 'RegExp' // TODO remove
	| {ErrorType} 'Error' // TODO remove
//	| {DOMExceptionType} 'DOMException' // TODO remove
	| BufferRelatedType // TODO enable - disabled on purpose to support typedarray.idl
	| {FrozenArrayType} 'FrozenArray' '<' type=ExtendedType '>'
	| {ObservableArrayType} 'ObservableArray' '<' type=ExtendedType '>'
	| {RecordType} 'record' '<' keyType=StringType ',' valueType=ExtendedType '>'
;


BufferRelatedType
	: {ArrayBufferType}'ArrayBuffer'
	| {DataViewType}'DataView'
	| {Int8ArrayType}'Int8Array'
	| {Int16ArrayType}'Int16Array'
	| {Int32ArrayType}'Int32Array'
	| {Uint8ArrayType}'Uint8Array'
	| {Uint16ArrayType}'Uint16Array'
	| {Uint32ArrayType}'Uint32Array'
	| {Uint8ClampedArrayType}'Uint8ClampedArray'
	| {Float32ArrayType}'Float32Array'
	| {Float64ArrayType}'Float64Array'
;

// TODO Get rid of ConstType (replace by DistinguishableType?)
ConstType returns DistinguishableType:
	PrimitiveType nullable?=Nullable?
	| {ReferenceType} typeRef=[Definition|IDENTIFIER_WEBIDL] nullable?=Nullable?
;

PrimitiveType:
	UnrestrictedIntegerType
	| UnrestrictedFloatType
	| {BooleanType} 'boolean'
	| {ByteType} 'byte'
	| {OctetType} 'octet'
;

UnrestrictedFloatType:
	{FloatType} unrestricted?='unrestricted'? 'float'
	| {DoubleType} unrestricted?='unrestricted'? 'double'
;

UnrestrictedIntegerType:
	{ShortType} unsigned?='unsigned'? 'short'
	| {LongType} unsigned?='unsigned'? 'long'
	| {LongLongType} unsigned?='unsigned'? 'long' 'long'
;

StringType:
	{ByteStringType} 'ByteString'
	| {DOMStringType} 'DOMString'
	| {USVStringType} 'USVString'
;

Nullable:
	{Nullable} '?'
;

ReturnType:
	Type
	| {VoidType} 'void'
;


// Helper interface mainly for overloading
Callable:
	Operation
	| Callback
	| ExtendedAttribute
;



// TODO name might not be correct for ExtendedAttributes (e.g., use attribute=...)

ExtendedAttributeNoArgs:
	nameRef=IDENTIFIER_WEBIDL;

ExtendedAttributeArgList:
	nameRef=IDENTIFIER_WEBIDL '(' (arguments+=Argument (',' arguments+=Argument)*)? ')';

ExtendedAttributeIdent:
	nameRef=IDENTIFIER_WEBIDL '=' nameRefB=IDENTIFIER_WEBIDL;

ExtendedAttributeIdentList:
	nameRef=IDENTIFIER_WEBIDL '=' '(' (identifiers+=IDENTIFIER_WEBIDL (',' identifiers+=IDENTIFIER_WEBIDL)*)? ')';

ExtendedAttributeNamedArgList:
	nameRef=IDENTIFIER_WEBIDL '=' nameRefB=IDENTIFIER_WEBIDL '(' (arguments+=Argument (',' arguments+=Argument)*)? ')';


terminal INTEGER_WEBIDL returns ecore::EInt:
	'-'? ('0' (('0'..'7')* | ('X' | 'x') ('0'..'9' | 'A'..'F' | 'a'..'f')+) | ('1'..'9') ('0'..'9')*);
terminal FLOAT_WEBIDL returns ecore::EFloat:
	'-'? ((('0'..'9')+ '.' ('0'..'9')* | /*('0'..'9')**/ '.' ('0'..'9')+) (('E' | 'e') ('+' | '-')? ('0'..'9')+)? | ('0'..'9')+ ('E' | 'e') ('+' | '-')? ('0'..'9')+);
terminal IDENTIFIER_WEBIDL returns ecore::EString:
	('A'..'Z' | '_' | 'a'..'z') ('0'..'9' | 'A'..'Z' | '_' | 'a'..'z')*;
terminal STRING:
	'"'->'"';
terminal ML_COMMENT:
	'/*' -> '*/';
terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS:
	(' '|'\t'|'\r'|'\n')+;
//terminal STRING_WEBIDL:
//	'"'->'"';
//terminal WHITESPACE_WEBIDL:
//	('\t' | '\n' | '\r' | ' ')+ | ('\t' | '\n' | '\r' | ' ')* (('//' /*.**//* INSERT BEGIN */ (!('\n'|'\r')* '\r'? '\n') /* INSERT END */ | '/*' -> '*/') ('\t' | '\n' | '\r' | ' ')*)+
//	; // TODO '?' ???
terminal OTHER_WEBIDL:
	!('\t' | '\n' | '\r' | ' ' | '0'..'9' | 'A'..'Z' | '_' | 'a'..'z');


/*terminal FLOAT:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?; // TODO Check this!
terminal OTHER_TERMINAL: // [^\t\n\r 0-9A-Z_a-z]
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?; // TODO Check this!
*/